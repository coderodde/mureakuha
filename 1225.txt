import java.util.Random;
import java.util.Arrays;

public class Main {

    /** Sorts a list of <code>Comparable T</code>'s into ascending order using
     * so called Batcher`s method or merge exchange sort as Knuth calls it.
     * This one performs well on medium-large lists of 10000 - 100000 elements.
     * @param <T> type of the objects to sort; should implement <code>
     * Comparable</code> - interface
     * @param list the list to sort in-place
     */
    public static <T extends Comparable<T>> void MergeExchangesort( T[] list )
    {
        final int t = (int) Math.ceil( Math.log(list.length) / Math.log(2.0) );
        final int n = list.length;

        for( int p = (int) Math.pow(2, t - 1); p > 0; p >>= 1 )
        {
            int r = 0;
            int d = p;

            for( int q = (int) Math.pow(2, t - 1); q >= p; q >>= 1 )
            {
                for( int i = 0; i < n - d; i++ )
                    if( (i & p) == r )
                        if( list[i].compareTo( list[i + d] ) > 0 )
                        {
                            T tmp = list[i];
                            list[i] = list[i + d];
                            list[i + d] = tmp;
                        }

                d = q - p;
                r = p;
            }
        }
    }

    /** Test driver. */
    public static void main( String... args ){
        Integer[] list0 = getRandomList( 15 );

        // making a visual demo
        System.out.print( "Before Batcher's method: " );
        println( list0 );

        MergeExchangesort( list0 );

        System.out.print( "After Batcher's method:  " );
        println( list0 );

        System.out.println();

        Integer[] list1 = getRandomList( 70000 );
        Integer[] list2 = (Integer[]) list1.clone();

        // profile MergeExchangesort (Batcher's method)
        long ta = System.currentTimeMillis();
        MergeExchangesort( list1 );
        System.out.println(
                "Batcher's method took " +
                (System.currentTimeMillis() - ta) + " ms."
                );

        // profile Arrays.sort
        ta = System.currentTimeMillis();
        Arrays.sort( list2 );
        System.out.println(
                "Arrays.sort() took " +
                (System.currentTimeMillis() - ta) + " ms."
                );

        // compare the sorted lists
        System.out.println(
                "Sorted lists are equal: " +
                listEquals( list1, list2 )
                );
    }

    static <T> void println( T[] list ){
        int n = Math.min( list.length, 20 );
        for( int i = 0; i < n; i++ )
            System.out.print( list[i].toString() + " " );

        System.out.println();
    }

    static Integer[] getRandomList( int n ){
        Integer[] list = new Integer[n];
        Random r = new Random();

        for( int i = 0; i < n; i++ )
            list[i] = r.nextInt( 2 * n );

        return list;
    }

    static boolean listEquals( Object[] list1, Object[] list2 ){
        if( list1.length != list2.length )
            return false;

        for( int i = 0; i < list1.length; i++ )
            if( !list1[i].equals( list2[i] ) )
                return false;

        return true;
    }
}
